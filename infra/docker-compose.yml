services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.6
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  kafka-setup:
    image: bitnami/kafka:3.6
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        kafka-topics.sh --bootstrap-server kafka:9092 --create --topic orders --partitions 1 --replication-factor 1 --if-not-exists
        kafka-topics.sh --bootstrap-server kafka:9092 --create --topic orders-retry --partitions 1 --replication-factor 1 --if-not-exists
        kafka-topics.sh --bootstrap-server kafka:9092 --create --topic orders-dlq --partitions 1 --replication-factor 1 --if-not-exists
        echo 'Topics created successfully'
      "
    restart: "no"

  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_DATABASE=catalog
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-worker:
    build:
      context: ../services/order-worker
      dockerfile: Dockerfile
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=orders
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      product-api:
        condition: service_started
      customer-api:
        condition: service_started

  product-api:
    build:
      context: ../services/product-api
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECK=true
      - DATABASE_TYPE=mongodb
      - DATABASE_URL=mongodb://mongo:27017
      - DATABASE_NAME=catalog
      - DATABASE_COLLECTION=products
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-api:
    build:
      context: ../services/customer-api
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECK=true
      - DATABASE_TYPE=mongodb
      - DATABASE_URL=mongodb://mongo:27017
      - DATABASE_NAME=catalog
      - DATABASE_COLLECTION=customers
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  kafka-data:
  mongo-data:
  redis-data:
