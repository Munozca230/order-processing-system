{
  "info": {
    "name": "Order Processing System - Complete Testing",
    "description": "Colecci√≥n completa para probar el sistema de procesamiento de pedidos con arquitectura de microservicios.\n\nüöÄ **Caracter√≠sticas:**\n- Testing completo de APIs Go\n- Verificaci√≥n de health checks\n- Pruebas de validaci√≥n y enriquecimiento\n- Casos de error y reintentos\n- Comandos CLI para MongoDB\n\nüìã **Prerequisitos:**\n1. Ejecutar: `docker-compose up -d`\n2. Esperar 45 segundos para inicializaci√≥n\n3. Verificar servicios healthy\n\nüîç **Orden de ejecuci√≥n recomendada:**\n1. Health Checks\n2. API Testing\n3. Order Processing Scenarios\n4. MongoDB CLI Commands",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost",
      "type": "string"
    },
    {
      "key": "productApiPort",
      "value": "8081",
      "type": "string"
    },
    {
      "key": "customerApiPort", 
      "value": "8082",
      "type": "string"
    },
    {
      "key": "mongoPort",
      "value": "27017",
      "type": "string"
    },
    {
      "key": "redisPort",
      "value": "6379",
      "type": "string"
    },
    {
      "key": "orderApiPort",
      "value": "3000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health Checks",
      "description": "Verificar que todos los servicios est√©n funcionando correctamente",
      "item": [
        {
          "name": "Product API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["health"]
            },
            "description": "Verificar estado del Product API"
          },
          "response": []
        },
        {
          "name": "Customer API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["health"]
            },
            "description": "Verificar estado del Customer API"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üõçÔ∏è Product API Testing",
      "description": "Probar todas las funcionalidades del Product API",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products"]
            },
            "description": "Obtener todos los productos disponibles"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/product-1",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "product-1"]
            },
            "description": "Obtener producto espec√≠fico por ID"
          },
          "response": []
        },
        {
          "name": "Get New Product - SSD NVMe",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/product-6",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "product-6"]
            },
            "description": "Obtener SSD NVMe 1TB Samsung del cat√°logo expandido"
          },
          "response": []
        },
        {
          "name": "Get New Product - RTX 4060",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/product-8",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "product-8"]
            },
            "description": "Obtener Tarjeta Gr√°fica RTX 4060 del cat√°logo expandido"
          },
          "response": []
        },
        {
          "name": "Get Non-existent Product",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/non-existent",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "non-existent"]
            },
            "description": "Probar comportamiento con producto inexistente"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë• Customer API Testing",
      "description": "Probar todas las funcionalidades del Customer API",
      "item": [
        {
          "name": "Get All Customers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"]
            },
            "description": "Obtener todos los clientes"
          },
          "response": []
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers/customer-premium",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers", "customer-premium"]
            },
            "description": "Obtener cliente espec√≠fico por ID"
          },
          "response": []
        },
        {
          "name": "Get Active Customers Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers?active=true",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"],
              "query": [
                {
                  "key": "active",
                  "value": "true"
                }
              ]
            },
            "description": "Obtener solo clientes activos"
          },
          "response": []
        },
        {
          "name": "Get Non-existent Customer",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers/non-existent",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers", "non-existent"]
            },
            "description": "Probar comportamiento con cliente inexistente"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üì¶ Order Processing Scenarios",
      "description": "Pruebas completas del procesamiento de pedidos",
      "item": [
        {
          "name": "Valid Order Processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"test-order-001\",\n  \"customerId\": \"customer-1\",\n  \"products\": [\n    {\n      \"productId\": \"product-1\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:{{orderApiPort}}/api/orders",
              "host": ["{{baseUrl}}"],
              "port": "{{orderApiPort}}",
              "path": ["api", "orders"]
            },
            "description": "Procesar pedido v√°lido con cliente activo y producto existente"
          },
          "response": []
        },
        {
          "name": "Invalid Customer Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"test-order-002\",\n  \"customerId\": \"customer-inactive\",\n  \"products\": [\n    {\n      \"productId\": \"product-2\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:{{orderApiPort}}/api/orders",
              "host": ["{{baseUrl}}"],
              "port": "{{orderApiPort}}",
              "path": ["api", "orders"]
            },
            "description": "Probar pedido con cliente inactivo - deber√≠a fallar validaci√≥n"
          },
          "response": []
        },
        {
          "name": "Invalid Product Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"test-order-003\",\n  \"customerId\": \"customer-1\",\n  \"products\": [\n    {\n      \"productId\": \"non-existent-product\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:{{orderApiPort}}/api/orders",
              "host": ["{{baseUrl}}"],
              "port": "{{orderApiPort}}",
              "path": ["api", "orders"]
            },
            "description": "Probar pedido con producto inexistente - deber√≠a fallar validaci√≥n"
          },
          "response": []
        },
        {
          "name": "Mixed Products Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"test-order-004\",\n  \"customerId\": \"customer-2\",\n  \"products\": [\n    {\n      \"productId\": \"product-1\"\n    },\n    {\n      \"productId\": \"product-3\"\n    },\n    {\n      \"productId\": \"product-5\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:{{orderApiPort}}/api/orders",
              "host": ["{{baseUrl}}"],
              "port": "{{orderApiPort}}",
              "path": ["api", "orders"]
            },
            "description": "Probar pedido con m√∫ltiples productos v√°lidos"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä MongoDB Verification",
      "description": "Verificar datos almacenados en MongoDB usando comandos CLI",
      "item": [
        {
          "name": "MongoDB CLI Commands",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["health"]
            },
            "description": "üìã **Comandos MongoDB CLI:**\n\nüîç **Ver √≥rdenes procesadas:**\n```bash\ndocker compose exec mongo mongosh orders --eval \"db.orders.find().forEach(printjson)\"\n```\n\nüìä **Estad√≠sticas por cliente:**\n```bash\ndocker compose exec mongo mongosh orders --eval \"db.orders.aggregate([{$group: {_id: '$customerId', total: {$sum: 1}}}]).forEach(printjson)\"\n```\n\nüî¢ **Contar √≥rdenes:**\n```bash\ndocker compose exec mongo mongosh orders --eval \"db.orders.countDocuments()\"\n```\n\n‚ö†Ô∏è **Nota:** MongoDB no expone endpoints HTTP por defecto. Use los comandos CLI arriba para verificar datos."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Esta petici√≥n solo muestra los comandos CLI necesarios",
                  "// Para verificar MongoDB, usar los comandos en la descripci√≥n",
                  "pm.test(\"MongoDB CLI commands available\", function () {",
                  "    pm.expect(true).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîß System Utilities",
      "description": "Comandos √∫tiles para monitoreo y debug del sistema",
      "item": [
        {
          "name": "System Commands",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["health"]
            },
            "description": "üìã **Comandos Sistema:**\n\nüîç **Estado servicios:**\n```bash\ndocker compose ps\n```\n\nüìä **Logs order-worker:**\n```bash\ndocker compose logs -f order-worker\n```\n\nüîÑ **Reiniciar servicios:**\n```bash\ndocker compose restart\n```\n\nüßπ **Limpiar vol√∫menes:**\n```bash\ndocker compose down -v\n```\n\n‚ö†Ô∏è **Nota:** Estos comandos se ejecutan desde terminal, no como peticiones HTTP."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Esta petici√≥n solo muestra comandos √∫tiles del sistema",
                  "// Para monitoreo, usar los comandos en la descripci√≥n",
                  "pm.test(\"System commands available\", function () {",
                  "    pm.expect(true).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}