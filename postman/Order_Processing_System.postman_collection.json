{
  "info": {
    "name": "Order Processing System - Complete Testing",
    "description": "Colecci√≥n completa para probar el sistema de procesamiento de pedidos con arquitectura de microservicios.\n\nüöÄ **Caracter√≠sticas:**\n- Testing completo de APIs Go\n- Verificaci√≥n de health checks\n- Pruebas de validaci√≥n y enriquecimiento\n- Casos de error y reintentos\n- MongoDB queries\n\nüìã **Prerequisitos:**\n1. Ejecutar: `docker-compose up -d`\n2. Esperar 45 segundos para inicializaci√≥n\n3. Verificar servicios healthy\n\nüîç **Orden de ejecuci√≥n recomendada:**\n1. Health Checks\n2. API Testing\n3. Order Processing Scenarios\n4. MongoDB Verification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost",
      "type": "string"
    },
    {
      "key": "productApiPort",
      "value": "8081",
      "type": "string"
    },
    {
      "key": "customerApiPort", 
      "value": "8082",
      "type": "string"
    },
    {
      "key": "mongoPort",
      "value": "27017",
      "type": "string"
    },
    {
      "key": "redisPort",
      "value": "6379",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health Checks",
      "description": "Verificar que todos los servicios est√©n funcionando correctamente",
      "item": [
        {
          "name": "Product API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["health"]
            },
            "description": "Verificar estado del Product API"
          },
          "response": []
        },
        {
          "name": "Customer API Health",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/health",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["health"]
            },
            "description": "Verificar estado del Customer API"
          },
          "response": []
        },
        {
          "name": "Product API Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/metrics",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["metrics"]
            },
            "description": "Obtener m√©tricas del Product API"
          },
          "response": []
        },
        {
          "name": "Customer API Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/metrics", 
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["metrics"]
            },
            "description": "Obtener m√©tricas del Customer API"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üõçÔ∏è Product API Testing",
      "description": "Pruebas completas del API de productos",
      "item": [
        {
          "name": "Get Product by ID - Valid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/product-1",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "product-1"]
            },
            "description": "Obtener producto v√°lido por ID"
          },
          "response": []
        },
        {
          "name": "Get Product by ID - Invalid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products/non-existent-product",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products", "non-existent-product"]
            },
            "description": "Intentar obtener producto inexistente"
          },
          "response": []
        },
        {
          "name": "Get All Products - Default",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products"]
            },
            "description": "Obtener todos los productos (paginaci√≥n por defecto)"
          },
          "response": []
        },
        {
          "name": "Get Products - Paginated",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products?page=0&page_size=3",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "page_size", 
                  "value": "3"
                }
              ]
            },
            "description": "Obtener productos con paginaci√≥n espec√≠fica"
          },
          "response": []
        },
        {
          "name": "Get Products - Active Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{productApiPort}}/products?active=true",
              "host": ["{{baseUrl}}"],
              "port": "{{productApiPort}}",
              "path": ["products"],
              "query": [
                {
                  "key": "active",
                  "value": "true"
                }
              ]
            },
            "description": "Obtener solo productos activos"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë• Customer API Testing",
      "description": "Pruebas completas del API de clientes",
      "item": [
        {
          "name": "Get Customer by ID - Valid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers/customer-1",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers", "customer-1"]
            },
            "description": "Obtener cliente v√°lido por ID"
          },
          "response": []
        },
        {
          "name": "Get Customer by ID - Invalid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers/non-existent-customer",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers", "non-existent-customer"]
            },
            "description": "Intentar obtener cliente inexistente"
          },
          "response": []
        },
        {
          "name": "Get All Customers - Default",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"]
            },
            "description": "Obtener todos los clientes (paginaci√≥n por defecto)"
          },
          "response": []
        },
        {
          "name": "Get Customers - Active Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers?active=true",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"],
              "query": [
                {
                  "key": "active",
                  "value": "true"
                }
              ]
            },
            "description": "Obtener solo clientes activos"
          },
          "response": []
        },
        {
          "name": "Get Customers - Inactive Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers?active=false",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"],
              "query": [
                {
                  "key": "active",
                  "value": "false"
                }
              ]
            },
            "description": "Obtener solo clientes inactivos"
          },
          "response": []
        },
        {
          "name": "Get Customers - Paginated",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:{{customerApiPort}}/customers?page=0&page_size=2",
              "host": ["{{baseUrl}}"],
              "port": "{{customerApiPort}}",
              "path": ["customers"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "page_size",
                  "value": "2"
                }
              ]
            },
            "description": "Obtener clientes con paginaci√≥n espec√≠fica"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üì¶ Order Processing Scenarios",
      "description": "Escenarios de procesamiento de √≥rdenes para simular via Kafka",
      "item": [
        {
          "name": "‚úÖ Valid Order - Happy Path",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"postman-test-001\",\n  \"customerId\": \"customer-1\",\n  \"products\": [\n    {\"productId\": \"product-1\"},\n    {\"productId\": \"product-2\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:8080/orders/test",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["orders", "test"]
            },
            "description": "‚ö†Ô∏è NOTA: Este endpoint NO existe en el sistema real.\n\nEste JSON debe enviarse a Kafka usando:\n```bash\necho '{...}' | docker-compose exec -T kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders\n```\n\n‚úÖ **Resultado esperado:**\n- Cliente activo ‚úì\n- Productos existentes ‚úì\n- Orden procesada y guardada en MongoDB"
          },
          "response": []
        },
        {
          "name": "‚ùå Invalid Customer - Inactive",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"postman-test-002\",\n  \"customerId\": \"customer-3\",\n  \"products\": [\n    {\"productId\": \"product-1\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:8080/orders/test",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["orders", "test"]
            },
            "description": "‚ö†Ô∏è NOTA: Este endpoint NO existe en el sistema real.\n\nEste JSON debe enviarse a Kafka usando:\n```bash\necho '{...}' | docker-compose exec -T kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders\n```\n\n‚ùå **Resultado esperado:**\n- Cliente inactivo (customer-3)\n- Validaci√≥n falla\n- Orden enviada a cola de reintentos"
          },
          "response": []
        },
        {
          "name": "‚ùå Invalid Product - Non-existent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"postman-test-003\",\n  \"customerId\": \"customer-1\",\n  \"products\": [\n    {\"productId\": \"non-existent-product\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:8080/orders/test",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["orders", "test"]
            },
            "description": "‚ö†Ô∏è NOTA: Este endpoint NO existe en el sistema real.\n\nEste JSON debe enviarse a Kafka usando:\n```bash\necho '{...}' | docker-compose exec -T kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders\n```\n\n‚ùå **Resultado esperado:**\n- Producto inexistente\n- Enriquecimiento falla\n- Reintentos exponenciales activados"
          },
          "response": []
        },
        {
          "name": "üîÑ Mixed Products - Partial Success",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"postman-test-004\",\n  \"customerId\": \"customer-2\",\n  \"products\": [\n    {\"productId\": \"product-1\"},\n    {\"productId\": \"invalid-product\"},\n    {\"productId\": \"product-3\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:8080/orders/test",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["orders", "test"]
            },
            "description": "‚ö†Ô∏è NOTA: Este endpoint NO existe en el sistema real.\n\nEste JSON debe enviarse a Kafka usando:\n```bash\necho '{...}' | docker-compose exec -T kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders\n```\n\nüîÑ **Resultado esperado:**\n- Algunos productos v√°lidos, uno inv√°lido\n- Enriquecimiento falla por producto inexistente\n- Sistema de reintentos activado"
          },
          "response": []
        },
        {
          "name": "üîí Duplicate Order - Lock Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"duplicate-test-001\",\n  \"customerId\": \"customer-1\",\n  \"products\": [\n    {\"productId\": \"product-1\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}:8080/orders/test",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["orders", "test"]
            },
            "description": "‚ö†Ô∏è NOTA: Este endpoint NO existe en el sistema real.\n\nPara probar distributed locking, env√≠a este mismo mensaje M√öLTIPLES VECES R√ÅPIDAMENTE:\n```bash\n# Ejecutar estos comandos r√°pidamente en terminales separadas\necho '{...}' | docker-compose exec -T kafka kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders\n```\n\nüîí **Resultado esperado:**\n- Solo una instancia procesar√° la orden\n- Otras instancias ser√°n bloqueadas por distributed lock\n- Verificar logs: \"Order already being processed, skipping\""
          },
          "response": []
        }
      ]
    },
    {
      "name": "üíæ MongoDB Verification",
      "description": "Scripts para verificar datos en MongoDB (ejecutar en terminal)",
      "item": [
        {
          "name": "üìä Check Sample Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:27017/info",
              "host": ["{{baseUrl}}"],
              "port": "{{mongoPort}}",
              "path": ["info"]
            },
            "description": "‚ö†Ô∏è MongoDB no expone HTTP endpoints por defecto.\n\n**Ejecutar en terminal:**\n```bash\n# Verificar datos de productos\ndocker-compose exec mongo mongosh catalog --eval \"db.products.find().forEach(printjson)\"\n\n# Verificar datos de clientes  \ndocker-compose exec mongo mongosh catalog --eval \"db.customers.find().forEach(printjson)\"\n\n# Contar documentos\ndocker-compose exec mongo mongosh catalog --eval \"print('Products:', db.products.countDocuments()); print('Customers:', db.customers.countDocuments())\"\n```"
          },
          "response": []
        },
        {
          "name": "üì¶ Check Processed Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:27017/orders",
              "host": ["{{baseUrl}}"],
              "port": "{{mongoPort}}",
              "path": ["orders"]
            },
            "description": "‚ö†Ô∏è MongoDB no expone HTTP endpoints por defecto.\n\n**Ejecutar en terminal:**\n```bash\n# Ver todas las √≥rdenes procesadas\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find().forEach(printjson)\"\n\n# Buscar orden espec√≠fica\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find({orderId: 'ORDER_ID_HERE'}).forEach(printjson)\"\n\n# Contar √≥rdenes por estado\ndocker-compose exec mongo mongosh orders --eval \"print('Total orders:', db.orders.countDocuments())\"\n\n# Ver √≥rdenes recientes\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find().sort({_id: -1}).limit(5).forEach(printjson)\"\n```"
          },
          "response": []
        },
        {
          "name": "üîç Advanced MongoDB Queries",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:27017/advanced",
              "host": ["{{baseUrl}}"],
              "port": "{{mongoPort}}",
              "path": ["advanced"]
            },
            "description": "‚ö†Ô∏è MongoDB no expone HTTP endpoints por defecto.\n\n**Consultas avanzadas (ejecutar en terminal):**\n```bash\n# √ìrdenes por cliente espec√≠fico\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find({customerId: 'customer-1'}).forEach(printjson)\"\n\n# √ìrdenes con productos espec√≠ficos\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find({'products.productId': 'product-1'}).forEach(printjson)\"\n\n# Estad√≠sticas de productos m√°s ordenados\ndocker-compose exec mongo mongosh orders --eval \"db.orders.aggregate([{\\$unwind: '\\$products'}, {\\$group: {_id: '\\$products.productId', count: {\\$sum: 1}, totalRevenue: {\\$sum: '\\$products.price'}}}, {\\$sort: {count: -1}}]).forEach(printjson)\"\n\n# √ìrdenes fallidas (si las hay)\ndocker-compose exec mongo mongosh orders --eval \"db.orders.find({status: 'failed'}).forEach(printjson)\"\n```"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîß System Utilities",
      "description": "Utilidades para el sistema y debugging",
      "item": [
        {
          "name": "üìã Docker Compose Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:8080/system/status",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["system", "status"]
            },
            "description": "‚ö†Ô∏è Este endpoint NO existe en el sistema real.\n\n**Ejecutar en terminal:**\n```bash\n# Ver estado de todos los servicios\ndocker-compose ps\n\n# Ver logs de servicios espec√≠ficos\ndocker-compose logs order-worker\ndocker-compose logs product-api\ndocker-compose logs customer-api\n\n# Ver logs en tiempo real\ndocker-compose logs -f order-worker\n\n# Verificar health de servicios\ndocker-compose exec product-api wget -qO- http://localhost:8080/health\ndocker-compose exec customer-api wget -qO- http://localhost:8080/health\n```"
          },
          "response": []
        },
        {
          "name": "üîÑ Restart Services",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}:8080/system/restart",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["system", "restart"]
            },
            "description": "‚ö†Ô∏è Este endpoint NO existe en el sistema real.\n\n**Ejecutar en terminal:**\n```bash\n# Reiniciar todos los servicios\ndocker-compose down && docker-compose up -d\n\n# Reiniciar servicio espec√≠fico\ndocker-compose restart order-worker\ndocker-compose restart product-api\ndocker-compose restart customer-api\n\n# Rebuild y reiniciar\ndocker-compose down && docker-compose up -d --build\n\n# Limpiar vol√∫menes y reiniciar\ndocker-compose down -v && docker-compose up -d\n```"
          },
          "response": []
        },
        {
          "name": "üêõ Debug Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}:8080/debug/info",
              "host": ["{{baseUrl}}"],
              "port": "8080",
              "path": ["debug", "info"]
            },
            "description": "‚ö†Ô∏è Este endpoint NO existe en el sistema real.\n\n**Comandos de debugging:**\n```bash\n# Ver configuraci√≥n de Kafka\ndocker-compose exec kafka kafka-topics.sh --bootstrap-server localhost:9092 --list\n\n# Ver mensajes en t√≥pico orders\ndocker-compose exec kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders --from-beginning\n\n# Ver mensajes en dead letter queue\ndocker-compose exec kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders-dlq --from-beginning\n\n# Verificar Redis keys\ndocker-compose exec redis redis-cli KEYS \"*\"\n\n# Ver locks activos en Redis\ndocker-compose exec redis redis-cli KEYS \"lock:*\"\n\n# Ver mensajes fallidos en Redis\ndocker-compose exec redis redis-cli KEYS \"failed:*\"\n```"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generar timestamp para IDs √∫nicos",
          "pm.globals.set('timestamp', Date.now());",
          "",
          "// Verificar que los servicios est√©n corriendo",
          "console.log('üöÄ Preparando request...');",
          "console.log('üìä Variables configuradas:');",
          "console.log('  - Base URL:', pm.variables.get('baseUrl'));",
          "console.log('  - Product API:', pm.variables.get('baseUrl') + ':' + pm.variables.get('productApiPort'));",
          "console.log('  - Customer API:', pm.variables.get('baseUrl') + ':' + pm.variables.get('customerApiPort'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Tests globales para todas las requests",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log de respuesta para debugging",
          "console.log('üì• Response Status:', pm.response.status);",
          "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
          "",
          "// Tests espec√≠ficos por status code",
          "if (pm.response.status === 'OK') {",
          "    pm.test('Status code is 200', function () {",
          "        pm.response.to.have.status(200);",
          "    });",
          "    ",
          "    pm.test('Response has valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "} else if (pm.response.status === 'Not Found') {",
          "    pm.test('Status code is 404 for non-existent resources', function () {",
          "        pm.response.to.have.status(404);",
          "    });",
          "} else {",
          "    console.log('‚ö†Ô∏è Unexpected status:', pm.response.status);",
          "}"
        ]
      }
    }
  ]
}